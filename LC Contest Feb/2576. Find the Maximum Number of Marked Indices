class Solution {
public:
    int maxNumOfMarkedIndices(vector<int>& nums) {
        int i = 0, n = nums.size();
        sort(nums.begin(), nums.end());
        for(int j = n-n/2; j < n; j++)
            i += (2 * nums[i] <= nums[j] );
        return i * 2;
    }
};

// TC: O(N * log N) | SC: O(1)

// [2,4,5,9]
// i = 0, j = 2 (forms pair)
// i = 1, j = 3 (forms pair)

// [2,3,4, | 5,6,9]
// i = 0, j = 6 - 3 = 3 (forms pair)
// i = 1, j = 4 ==> (2*3 = 6 <= 6) (forms pair)
// i = 2, j = 5 ==> (2*4 = 8 <= 9) (forms pair)

/*
INTUTION
    We only make n / 2 pairs, So, We marked element from i = 0 for first element & j = n/2 for second element if nums[i] * 2 <= nums[j] is valid then we increment i & j.
    but it's invalid then we know that next element of j is greater, so in that case we increament j pointer.

    Intuition for this problem is tricky.
    Indices i and j form a pair (if 2 * nums[i] < nums[j]). If we want to make m pairs, the best strategy is to pick m smallest numbers as nums[i].

    At the same time, we cannot make more than n / 2 pairs. Therefore, we consider n - n / 2 largest numbers for nums[j].
    So, we sort the array, and greedily match smallest numbers with numbers in the second half of the sorted array.

Time Complexity - O(N*Log(N))
Space Complexity - O(1)
*/
