class Solution {
public:
    int dir[5] = {0, 1, 0, -1, 0};
    int minimumTime(vector<vector<int>>& g) {
        int m = g.size(), n = g[0].size();
        // m : no of rows, n : no of cols
        if(min(g[0][1] , g[1][0]) > 1) return -1;

        vector<vector<int>> vis(m, vector<int> (n, INT_MAX));
        priority_queue <array<int, 3>> pq;

        pq.push({0,0,0}); // <time, co-ord>
        while(!pq.empty()){
            auto [neg_sec, i, j] = pq.top(); pq.pop();
            // reached end state
            if(i == m-1 && j == n-1) break;
            for(int d = 0; d < 4; d++){    
                int x = i + dir[d];  
                int y = j + dir[d+1]; // R D L U
                // up : row - 1, col
                // down: row + 1, col
                // left : row, col - 1
                // right : row, col + 1

                // Checking position is in boundary
                if(min(x,y) >= 0 && x < m && y < n){
                    int sec = -neg_sec + 1;
                    if(sec < g[x][y]){
                        sec = g[x][y] + (g[x][y] - sec)%2; // sec = 3,  5+ (5 - 3)%2 = > 5 + 1 => 6
                    }
                    if(sec < vis[x][y]){
                        vis[x][y] = sec;
                        pq.push({-sec, x, y});
                    }
                }
            }
        }
        return vis.back().back();
    }
};

/*
First of all, if the required time for both g[0][1] and g[1][0] is greater than one, we cannot move (return -1).

Otherwise, we can always reach the bottom-right cell. If the current time (plus 1) is less than required, we can "wait" till the required time.
    We do not wait, of course - instead, we put the required time into the priority queue.

Note that we may need to add 1 to the required time, as we advance the current time in the increments of 2 seconds (by going back and forth).
    For example, if the current time is 3, and the required time is 9, we can get back to the current cell at 5, 7, and 9 seconds, so arrive at the adjacent cell at tenth second.

Finally, we need to use "visited" matrix (vis) to track the shortest time to arrive at each cell.

Question:
You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), 
which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].
You are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the 
four directions: up, down, left, and right. Each move you make takes 1 second.
Return the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.

Input: grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]
Output: 7
Explanation: One of the paths that we can take is the following:
- at t = 0, we are on the cell (0,0).
- at t = 1, we move to the cell (0,1). It is possible because grid[0][1] <= 1.
- at t = 2, we move to the cell (1,1). It is possible because grid[1][1] <= 2.
- at t = 3, we move to the cell (1,2). It is possible because grid[1][2] <= 3.
- at t = 4, we move to the cell (1,1). It is possible because grid[1][1] <= 4.
- at t = 5, we move to the cell (1,2). It is possible because grid[1][2] <= 5.
- at t = 6, we move to the cell (1,3). It is possible because grid[1][3] <= 6.
- at t = 7, we move to the cell (2,3). It is possible because grid[1][3] <= 7.
The final time is 7. It can be shown that it is the minimum time possible.

*/
