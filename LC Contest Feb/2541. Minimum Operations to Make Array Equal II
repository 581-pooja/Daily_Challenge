/* Question:
You are given two integer arrays nums1 and nums2 of equal length n and an integer k. You can perform the following operation on nums1:
    Choose two indexes i and j and increment nums1[i] by k and decrement nums1[j] by k. In other words, nums1[i] = nums1[i] + k and nums1[j] = nums1[j] - k.
nums1 is said to be equal to nums2 if for all indices i such that 0 <= i < n, nums1[i] == nums2[i].

Return the minimum number of operations required to make nums1 equal to nums2. If it is impossible to make them equal, return -1.

Example 1:
Input: nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3
Output: 2
Explanation: In 2 operations, we can transform nums1 to nums2.
1st operation: i = 2, j = 0. After applying the operation, nums1 = [1,3,4,4].
2nd operation: i = 2, j = 3. After applying the operation, nums1 = [1,3,7,1].
One can prove that it is impossible to make arrays equal in fewer operations.

Example 2:
Input: nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1
Output: -1
Explanation: It can be proved that it is impossible to make the two arrays equal.
*/

class Solution {
public:
    long long minOperations(vector<int>& nums1, vector<int>& nums2, int k) {
        if(k==0) //if k is 0 then we can do nothing
        {
            //if nums1 and nums2 are equal operations will be 0 
            //otherwise it is impossible to make them equal
            if(nums1==nums2) return 0; 
            return -1;
        }
        int n = nums1.size();
        int m = nums2.size();
        if(n != m) return -1;

        //p_diff stores positive difference between nums1[i] and nums2[i] 
        //n_diff stores negative difference between nums1[i] and nums2[i] 
        long long positive = 0;
        long long negative = 0;
        for(int i = 0; i < n; i++){
            long long cal = nums1[i] - nums2[i];
            if(cal > 0) positive += cal;
            else negative += cal;
        }
        if((positive + negative) == 0 && (positive % k) == 0 ) return positive / k;
        return -1;
    }
};
// TC: O(N) | Sc: O(1)
