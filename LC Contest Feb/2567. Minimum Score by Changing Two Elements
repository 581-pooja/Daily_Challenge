class Solution {
public:
    int minimizeSum(vector<int>& A) {
        int n = A.size();
        sort(A.begin(), A.end());
        // Change two biggest
        int highScore1 = A[n-3] - A[0];
        // change two smallest
        int highScore2 = A[n-1] - A[2];
        // change biggest and smalles
        int highScore3 = A[n-2] - A[1];
        return min(highScore1, min(highScore2, highScore3));
    }
};

// Only calculating high score since changing two biggest or two smallest or (smallest & biggest) with 1, 1 and difference 1-1 = 0
// so low score = 0 is always same so only calculate high score
// Time O(sort)
// Space O(sort)
// Also we can one pass,and find out the 3 biggest and 3 smallest in O(n)

/* Question:
You are given a 0-indexed integer array nums.
    The low score of nums is the minimum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length.
    The high score of nums is the maximum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length.
    The score of nums is the sum of the high and low scores of nums.
To minimize the score of nums, we can change the value of at most two elements of nums.
Return the minimum possible score after changing the value of at most two elements of nums.
Note that |x| denotes the absolute value of x.

Example 1:
Input: nums = [1,4,3]
Output: 0
Explanation: Change value of nums[1] and nums[2] to 1 so that nums becomes [1,1,1]. Now, the value of |nums[i] - nums[j]| is always equal to 0, so we return 0 + 0 = 0.

Example 2:
Input: nums = [1,4,7,8,5]
Output: 3
Explanation: Change nums[0] and nums[1] to be 6. Now nums becomes [6,6,7,8,5].
Our low score is achieved when i = 0 and j = 1, in which case |nums[i] - nums[j]| = |6 - 6| = 0.
Our high score is achieved when i = 3 and j = 4, in which case |nums[i] - nums[j]| = |8 - 5| = 3.
The sum of our high and low score is 3, which we can prove to be minimal.

Intuition
Change the biggest or the smallest,to be other existing number.

Explanation
Change two biggest, then the high score is A[n-3] - A[0]

Change the biggest and the smallest, then the high score is A[n-2] - A[1]

Change two smallest, then the high score is A[n-1] - A[2]

For the low score, we can always have 2 same numbers, so low score is 0.
*/
