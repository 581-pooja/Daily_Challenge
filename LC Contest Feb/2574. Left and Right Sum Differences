/* Question:
Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:
    answer.length == nums.length.
    answer[i] = |leftSum[i] - rightSum[i]|.
Where:
    leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.
    rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.
Return the array answer.

Example 1:
Input: nums = [10,4,8,3]
Output: [15,1,11,22]
Explanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].
The array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].

Example 2:
Input: nums = [1]
Output: [0]
Explanation: The array leftSum is [0] and the array rightSum is [0].
The array answer is [|0 - 0|] = [0].
*/
// Just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]
class Solution {
public:
    vector<int> leftRigthDifference(vector<int>& nums) {
        int n = nums.size();
        vector<int> leftSum;
        vector<int> RightSum;
        
        int sum = 0;
        leftSum.push_back(sum);
        for(int i = 0; i < n-1; i++){
            sum += nums[i];
            leftSum.push_back(sum);
        }
        
        sum = 0;
        RightSum.push_back(sum);
        for(int i = n-1; i > 0; i--){
            sum += nums[i];
            RightSum.push_back(sum);
        }
        
        reverse(RightSum.begin(), RightSum.end());
        
        vector<int> ans;
        for(int i = 0; i<n; i++ ){
            ans.push_back(abs(leftSum[i] - RightSum[i]));
        }
        
        return ans;
    }
};
// TC: O(2*N) SC: O(2*N)

// NO EXTRA Space required
class Solution {
public:
    vector<int> leftRigthDifference(vector<int>& nums) {
        long long total = 0;
        for(int num: nums) total += num;  

        vector<int> ans;
        long long leftSum = 0;
        for(int i = 0; i<nums.size(); i++){
            long long rightSum = total - (leftSum + nums[i]);
            ans.push_back(abs(rightSum - leftSum));
            leftSum += nums[i];
        }
        return ans;
    }
};
