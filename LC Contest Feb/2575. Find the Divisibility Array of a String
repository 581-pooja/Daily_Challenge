class Solution {
public:
    vector<int> divisibilityArray(string word, int m) {
        vector<int> ans;
        long long prevRem = 0;
        for(int i = 0; i< word.size(); i++){
            int curDigit = word[i] - '0';
            long long newDivided = (prevRem * 10) + curDigit;
            //newDividend = currDig appended to previous remainder
            int rem = (newDivided % m);
            if(rem == 0) ans.push_back(1);
            else ans.push_back(0);
            prevRem = rem;
        }
        return ans;
    }
};

class Solution {
public:
    vector<int> divisibilityArray(string word, int m) {
        int n = word.size();
        vector<int> ans(n, 0);
        long long val = 0;
        for(int i = 0; i<n; i++){
            val = (val * 10 + word[i] - '0')%m;
            // cout<<val<<" ";
            if(val % m == 0) {
                ans[i] = 1;
            }
        }
        return ans;
    }
};

// TC: O(N) | SC: O(1)

/* 
You are given a 0-indexed string word of length n consisting of digits, and a positive integer m.
The divisibility array div of word is an integer array of length n such that:
    div[i] = 1 if the numeric value of word[0,...,i] is divisible by m, or
    div[i] = 0 otherwise.
Return the divisibility array of word.

Example 1:

Input: word = "998244353", m = 3
Output: [1,1,0,0,0,1,1,0,0]
Explanation: There are only 4 prefixes that are divisible by 3: "9", "99", "998244", and "9982443".

Example 2:

Input: word = "1010", m = 10
Output: [0,1,0,1]
Explanation: There are only 2 prefixes that are divisible by 10: "10", and "1010".
*/
