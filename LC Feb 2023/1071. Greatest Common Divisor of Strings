class Solution {
public:
    string gcdOfStrings(string str1, string str2) {
        return (str1 + str2 == str2 + str1) ? 
        str1.substr(0, gcd(size(str1), size(str2))): "";
    }
};

/* TC: O(log2n)
It use Euclidean method to calculate gcd of two values. It's complexity is 𝑂(𝑙𝑜𝑔2𝑛) algorithm, where n is the upper limit of a and b. */
str1+str2 == str2+str1 if and only if str1 and str2 have a gcd .
E.g. str1=abcabc, str2=abc, then str1+str2 = abcabcabc = str2+str1

This(str1+str2==str2+str1) is a requirement for the strings to have a gcd. 
If one of them is NOT a common part then gcd is "".
It means we will return empty string
Proof:-str1 = mGCD, str2 = nGCD, str1 + str2 = (m + n)GCD = str2 + str1 */

// Brute Force Method

class Solution {
public:
    bool valid(string str1, string str2, int k){
        int len1 = str1.size(), len2 = str2.size();
        if(len1 % k > 0 || len2 % k > 0) return false; // 6%3 = 0 && 3%3 = 0
        else{
            string base = str1.substr(0, k); // ABC
            int n1 = len1 / k, n2 = len2 / k; // 6/3 = 2 & 3/3 = 1
            return str1 == joinWords(base, n1) && str2 == joinWords(base, n2);
        }
    }

    string joinWords(string str, int k){
        string ans = "";
        for(int i  = 0; i < k; i++){
            ans += str;
        }
        return ans;
    }

    string gcdOfStrings(string str1, string str2) {
        // str1 =  ABCABC str2 = ABC
        int len1 = str1.size(), len2 = str2.size();
        for(int i = min(len1, len2); i >= 1; --i){
            if(valid(str1, str2, i)){
                return str1.substr(0, i);
            }
        }
        return "";
    }
};
