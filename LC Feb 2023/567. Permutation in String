/*
Question:
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.
Example 1:
Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:
Input: s1 = "ab", s2 = "eidboaoo"
Output: false
*/

// Optimized Sliding Window approach: using array / hashmap to store the frequency of unique characters

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if(s1.size() > s2.size()) return false;
        vector <int> count1(26, 0), count2(26, 0);

        int i;
        for(i = 0; i < s1.size(); i++){
            // compute the frequency of each char for the first window
            count1[s1[i] - 'a']++;
            count2[s2[i] - 'a']++;
        }

        if(count1 == count2) return true;

        // search the remaining windows
        int start = 0, end = i;
        while(end < s2.size()){
            // remove char at 'start' index and add char at 'end' index
            --count2[s2[start] - 'a'];   // abcd
            ++count2[s2[end] - 'a'];     // start[a] reduce and increment for end[d]

            if(count1 == count2) return true;
            end++; start++;
        }
        return false;
    }
};

// Instead of making use of a special HashMap datastructure just to store the frequency of occurence of characters
// we can use a simpler array data structure to store the frequencies. 
// Tc: O(l1 + 26 * l1 * (l2 - l1)) ~ O(26 * n)
// Sc: O(1) (since s1 and s2 map/array size is constant size)

// Sorting Approach:
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();
        sort(begin(s1), end(s1));
        for(int i = 0; i < m-n+1 ; i++){
            // s.substr(position, length or size of substring)
            string temp = s2.substr(i, n);
            sort(temp.begin(), temp.end());
            if(s1 == temp) return true;
        }
        return false;
    }
};

/*
- In order to check this, we can sort the two strings and compare them. 
- We sort the short string s1 and all the substrings of s2, sort them and compare them
with the sorted s1 string. 
- If the two match completely, s1's permutation is a substring of s2, otherwise not.

Let l1 be the length of string s1 and l2 be the length of string s2
TC: O(l1 * log (l1)) + (l2 - l1) * O(l2 * log (l2))
Sort s1 + sort s2 * (l2 - l1) times
*/
