class Solution {
public:
    int mod = 1e9 + 7;
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int,int>> combine;
        for(int i = 0; i < n; i++){
            combine.push_back({efficiency[i], speed[i]});
        }
        sort(rbegin(combine), rend(combine));       // sorting efficiency descending order

        // min Heap to store speed
        priority_queue <int, vector<int>, greater<int>> pq;
        long sumSpeed = 0, res = 0;
        for(auto& [e, s]: combine){
            pq.emplace(s);          // put new speed in min heap
            sumSpeed += s;          // consider current speed to add

            if(pq.size() > k){
                sumSpeed = sumSpeed - pq.top();     // removing the least speed since efficiency stays min
                // cout<<sumSpeed<<" ";
                pq.pop();
            }

            res = max(res, (sumSpeed * e));       // Calculating max Performance
        }
        return res % mod;
    }
};
// Tc: O(N * log N) (Sorting) + O(N * log K) (Pushing/Poping N element in Min-Heap of size K so push & pop takes N * log K) ~ O(N * log N)
// SC: O(N) (Combine speed & efficiency) + O(k) Heap size ~ O(N)

/*
You are given two integers n and k and two integer arrays speed and efficiency both of length n. There are n engineers numbered from 1 to n. 
speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.

Choose at most k different engineers out of the n engineers to form a team with the maximum performance.

The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.

Return the maximum performance of this team. Since the answer can be a huge number, return it modulo 109 + 7.

Example 1:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2
Output: 60
Explanation: 
We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). 
That is, performance = (10 + 5) * min(4, 7) = 60.

Example 2:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3
Output: 68
Explanation:
This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. 
That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.

Example 3:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4
Output: 72

*/
