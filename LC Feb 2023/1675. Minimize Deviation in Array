class Solution {
public:
    int minimumDeviation(vector<int>& nums) {
        int n = nums.size();
        int res = INT_MAX;
        int min_n = INT_MAX;
        int cur_num;
        priority_queue <int> pq;

        // Double odd numbers and put all numbers into a max heap
        for(auto n: nums){
            // n = n % 2? n * 2 : n;
            if(n%2 == 1) n = n * 2;
            pq.push(n);
            min_n = min(min_n, n);
        }

        // Track the smallest number. 
        // Track the minimum difference between the top of the heap and the smallest number.
        // While the top of the heap is even, remove it, divide, and put back to the heap.
        while(pq.top() % 2 == 0){
            res = min(res, pq.top() - min_n);
            cur_num = pq.top()/2;               // max_num = max_num/2;
            min_n = min(min_n, cur_num);
            pq.push(cur_num);
            pq.pop();
        }
        return min(res, pq.top() - min_n);
    }
};

// Clean Code
class Solution {
public:
    int minimumDeviation(vector<int>& nums) {
        int n = nums.size();
        int res = INT_MAX;
        int min_n = INT_MAX;
        int cur_num;
        priority_queue <int> pq;

        for(auto n: nums){
            n = n % 2? n * 2 : n;
            pq.push(n);
            min_n = min(min_n, n);
        }

        while(pq.top() % 2 == 0){
            res = min(res, pq.top() - min_n);
            cur_num = pq.top()/2;               // max_num = max_num/2;
            min_n = min(min_n, cur_num);
            pq.push(cur_num);
            pq.pop();
        }
        return min(res, pq.top() - min_n);
    }
};
// Tc: O(N * log N * log M) (Pushing in PQ + Push/Pop max Element M in the pq)
// Sc: O(N) (max element in PQ will be N)

/*
Solution
Double odd numbers and put all numbers into a max heap. 
Track the smallest number. 
Track the minimum difference between the top of the heap and the smallest number. 
While the top of the heap is even, remove it, divide, and put back to the heap.

Flip: we can double all odd numbers first, so we can get forget of the second operation. 
Now, we only need to decrease the largest number - while it's even, which results a very simple solution.

Question:
You are given an array nums of n positive integers.
You can perform two types of operations on any element of the array any number of times:
    If the element is even, divide it by 2.
        For example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2].
    If the element is odd, multiply it by 2.
        For example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4].
The deviation of the array is the maximum difference between any two elements in the array.
Return the minimum deviation the array can have after performing some number of operations.

Example 1:
Input: nums = [1,2,3,4]
Output: 1
Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.

Example 2:
Input: nums = [4,1,5,20,3]
Output: 3
Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.

*/
