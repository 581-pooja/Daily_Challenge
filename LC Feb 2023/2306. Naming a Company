class Solution {
public:
    long long distinctNames(vector<string>& ideas) {
        // Group idea by their initials.
        unordered_set <string> initialGroup[26];
        for(auto &idea: ideas){
            initialGroup[idea[0] - 'a'].insert(idea.substr(1));
            // t -> {ime, offee} -> {unordered_set}
        }

        // Calculate number of valid names from every pair of groups
        long long ans = 0;
        for(int i = 0; i < 25; i++){
            for(int j = i+1 ; j < 26; j++){
                // Get the number of mutual or same sufffixes
                int numOfMutual = 0;
                for(auto &ideaA: initialGroup[i]){
                    if(initialGroup[j].count(ideaA)){
                        numOfMutual++;
                    }
                }

                // valid names are only from distinct suffixes in both groups
                // since we can swap a with b and b with a to create two valid names so *2
                ans += 2LL * (initialGroup[i].size() - numOfMutual) * (initialGroup[j].size() - numOfMutual);
            }
        }
        return ans;            
    }
};

/* TC: O(26 * n * m) ~ O(n * m)
1. Hash or to insert ideas by their initials it takes O(m) time to insert length m string thus n string takes O(n*m)
2. Taking each word and considering which pair of initials it can be part of, we can see that it is linear with the alphabet size, which is 26

SC:O(n * m) We store the suffixes of all words in an array of sets
*/

/* Question:
You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:

    Choose 2 distinct names from ideas, call them ideaA and ideaB.
    Swap the first letters of ideaA and ideaB with each other.
    If both of the new names are not found in the original ideas, then the name ideaA ideaB (the concatenation of ideaA and ideaB, separated by a space) 
    is a valid company name.
    Otherwise, it is not a valid name.

Return the number of distinct valid names for the company.

Example 1:
Input: ideas = ["coffee","donuts","time","toffee"]
Output: 6
Explanation: The following selections are valid:
- ("coffee", "donuts"): The company name created is "doffee conuts".
- ("donuts", "coffee"): The company name created is "conuts doffee".
- ("donuts", "time"): The company name created is "tonuts dime".
- ("donuts", "toffee"): The company name created is "tonuts doffee".
- ("time", "donuts"): The company name created is "dime tonuts".
- ("toffee", "donuts"): The company name created is "doffee tonuts".
Therefore, there are a total of 6 distinct company names.

The following are some examples of invalid selections:
- ("coffee", "time"): The name "toffee" formed after swapping already exists in the original array.
- ("time", "toffee"): Both names are still the same after swapping and exist in the original array.
- ("coffee", "toffee"): Both names formed after swapping already exist in the original array.

Example 2:
Input: ideas = ["lack","back"]
Output: 0
Explanation: There are no valid selections. Therefore, 0 is returned.

Algorithm:
1. Group words in ideas by their initials in initial_group, an array of sets of length 26, and initialize answer as 0.
2. Iterate over every pair of groups. For each group i and j, get the number of suffixes num_of_mutual that appears in both groups.
3. We can swap every distinct suffix in group i with every distinct suffix in group j, increment answer by 
      2 * (len(group[i]) - num_of_mutual) * (len(group[j]) - num_of_mutual)
4. Return answer.

Initution:
Any idea = first letter + postfix string.
We can group all ideas by their first letter.

If two ideas ideas[i] and ideas[j] share a common postfix string,
then ideas[i] can not pair with any idea starts with ideas[j][0]
and ideas[j] can not pair with any idea starts with ideas[i][0].

*/
