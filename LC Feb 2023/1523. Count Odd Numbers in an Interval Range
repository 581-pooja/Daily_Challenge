/* Question: 
Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).
Example 1:
Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].

Example 2:
Input: low = 8, high = 10
Output: 1
Explanation: The odd numbers between 8 and 10 are [9].*/

class Solution {
public:
    // Brute Force
    int countOdds(int low, int high) {
        int count = 0;
        for(int i = low ; i <= high; i++){
            if(i % 2 != 0) count++;
        }
        return count;
    }
};
// TC: O(N) | SC: O(1)

// Optimized Method
class Solution {
public:
    int countOdds(int low, int high) {
        return (high + 1) / 2 - low / 2;
    }
};

/*
Explanation:
the count of odd numbers between 1 and low - 1 is low / 2
the count of odd numbers between 1 and high is (high + 1 ) / 2
Complexity : Time O(1) | Space O(1)

eg. odd | odd => low = 3 (odd numbers between low - 1 since low is inclusive ) is low/2 
high = 7 (high + 1 = 7 + 1 = 8) so 8/2 = 4 odd numbers in between
*/
