/* Question:
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
You have the following three operations permitted on a word:
    Insert a character
    Delete a character
    Replace a character

Example 1:
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
*/

class Solution {
public:
    // Memoization : 1 based Indexing
    int f(int i, int j, string &s1, string &s2, vector<vector<int>> &dp){
        // Base condition
        if(i == 0) return j;
        if(j == 0) return i;
        // check overlapping subproblems
        if(dp[i][j] != -1) return dp[i][j];
        // string matches
        if(s1[i-1] == s2[j-1]){
            return dp[i][j] = f(i-1, j-1, s1, s2, dp);
        }
        // string Not matches
        return dp[i][j] = 1 + min(f(i-1, j, s1, s2, dp) , 
                       min( f(i, j-1, s1, s2, dp), f(i-1, j-1, s1, s2, dp)));
    }
    
    int minDistance(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();
        vector<vector<int>> dp(n+1, vector<int> (m+1, -1));
        return f(n, m, s1, s2, dp);
    }
};


class Solution {
public:
    // Tabulation : 1 based Indexing
    int minDistance(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();
        vector<vector<int>> dp(n+1, vector<int> (m+1, 0));
        vector<int> prev(m+1, 0);
        vector<int> cur(m+1, 0);
        // base condition
        for(int j = 0; j <= m; j++) prev[j] = j;
        // Explore all paths
        for(int i = 1; i <= n; i++){
            cur[0] = i;
            for(int j = 1; j <= m; j++){
                // strings matches
                if(s1[i-1] == s2[j-1]){
                    cur[j] = prev[j-1];
                }
                // strings not matches
                else{
                    cur[j] = 1 + min(prev[j] , min(cur[j-1], prev[j-1]));
                }
            }
            prev = cur;
        }
        return prev[m];
    }
};

class Solution {
public:
    // Space optimization
    int minDistance(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();
        vector<vector<int>> dp(n+1, vector<int> (m+1, 0));
        vector<int> prev(m+1, 0);
        vector<int> cur(m+1, 0);
        // base condition
        for(int j = 0; j <= m; j++) prev[j] = j;
        // Explore all paths
        for(int i = 1; i <= n; i++){
            cur[0] = i;
            for(int j = 1; j <= m; j++){
                // strings matches
                if(s1[i-1] == s2[j-1]){
                    cur[j] = prev[j-1];
                }
                // strings not matches
                else{
                    cur[j] = 1 + min(prev[j] , min(cur[j-1], prev[j-1]));
                }
            }
            prev = cur;
        }
        return prev[m];
    }
};
