class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
      int n = grid.size();
	    int m = grid[0].size();
	    // visited and distance matrix
	    vector<vector<int>> vis(n, vector<int> (m, 0));
	    vector<vector<int>> dist(n, vector<int> (m, 0));
	    // <<i,j>, steps> <co-ordinates, steps>
	    queue<pair<pair<int,int>, int>> q;
      
	    // marking the visited array and pushing all ones cell in the queue : O(N x M)
	    for(int i = 0; i < n; i++){
	        for(int j = 0; j < m; j++){
	            if(grid[i][j] == 1){
	                q.push({{i, j}, 0});
	                vis[i][j] = 1;
	            }
	            else{
	                vis[i][j] = 0;
	            }
	        }
	    }
	    
	    int delrow[] = {-1, 0, +1, 0};
	    int delcol[] = {0, +1, 0, -1};
        
        // n x m x 4
        int maxi = -1;
	    while(!q.empty()){
	        int row = q.front().first.first;
	        int col = q.front().first.second;
	        int steps = q.front().second;
	        q.pop();
	        // marking steps in dist matrix
	        dist[row][col] = steps;
            maxi = max(steps, maxi);
	        // for all 4 neighbours
	        for(int i = 0; i < 4; i++){
	            int nrow = row + delrow[i];
	            int ncol = col + delcol[i];
	            // check for valid unvisited cell
	            if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && vis[nrow][ncol] == 0){
	                vis[nrow][ncol] = 1;
	                q.push({{nrow, ncol}, steps + 1});
	            }
	        }
	    }
	    // return distance matrix
        if(maxi == 0) return -1;
	    return maxi;
    }
};
// Tc: O(N * M * 4) | SC: O(N * M)

/* Question: 
Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance 
to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.
The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.

Example 1:
Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.

Example 2:
Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.
*/
