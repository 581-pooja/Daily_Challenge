/* Question: Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.
Input: root = [4,2,6,1,3]
Output: 1

Intuition: The in-order traversal of a binary search tree produces a sorted array. 
Therefore, we will generate the in-order array of the given tree and then find the minimum difference */

class Solution {
public:
    vector<int> arr;
    void inorder(TreeNode* node){
        if(node == NULL) return;
        inorder(node->left);
        // store nodes in arr
        arr.push_back(node->val);
        inorder(node->right);
    }

    int minDiffInBST(TreeNode* root) {
        inorder(root);      // inorder of BST is sorted
        int mini = INT_MAX;
        for(int i = 0; i < arr.size() - 1; i++){
            mini = min(arr[i+1] - arr[i], mini);
        }
        return mini;
    }
};

// TC: O(N) | SC: O(N)

/*
Complexity Analysis
Here N is the number of nodes in the given binary search tree.

Time complexity: O(N)
We traverse the tree using in-order traversal; this takes O(N) time. Then we iterate over the array of size N elements to find the minimum difference. 
Therefore, the total time complexity equals O(N)

Space complexity: O(N)
The in-order traversal is recursive and would take some space to store the stack calls. 
The maximum number of active stack calls at a time would be the tree's height, in the worst case this space would be (N) when the tree is a straight line. 
We also need an array to store the N tree nodes. Therefore, the total space complexity equals O(N)
*/

class Solution {
public:
    int minDistance = INT_MAX;
    // Initially it will be null
    TreeNode* prevValue;
    void inorderTraversal(TreeNode* root){
        if(root == NULL) return;
        inorderTraversal(root->left);
        // Find the difference with the previous value if it is there
        if(prevValue != NULL){
            minDistance = min(minDistance, root->val - prevValue->val);
        }
        prevValue = root;
        inorderTraversal(root->right);
    }

    int minDiffInBST(TreeNode* root) {
        inorderTraversal(root);
        return minDistance;
    }
};
// TC: O(N) | SC: O(H)

/*
Complexity Analysis

Here N is the number of nodes in the given binary search tree, and H is the tree's height.
Time complexity: O(N)
We traverse the tree using in-order traversal; this takes O(N) time. Therefore, the total time complexity equals O(N)

Space complexity: O(H)
The in-order traversal is recursive and would take some space to store the stack calls. 
The maximum number of active stack calls at a time would be the tree's height and hence would take O(H) space. 
Therefore, the total space complexity equals O(H). Note that in the worst-case (H = N - 1), 
the order of height of the tree will be the same as the order of the number of nodes. 
*/
