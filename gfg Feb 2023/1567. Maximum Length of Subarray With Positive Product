
/* Initution: We can have only two possibilities in a subarray
- The count of negative number is even ,product will be +ve
- Count of negative number is odd ,product will be -ve
So when we get odd number of negative number then product will be negative so removing any 1 i.e. odd - 1 = even number 
- so to remove any 1 odd number we can remove first Negative Number or Last Negative number so take max of both
*/

class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        int maxi = 0;
        int n = nums.size();

        for(int i = 0; i < n; i++){
            int startNeg = -1;              // Store starting index of negative no.
            int endNeg = -1;                // Store end index of negative no.
            int neg = 0;                    // neg: no. of negative numbers.
            int posi = 0, ind;              // posi: no of positive numbers 

            //We will iterate until we found zero 
            for(ind=i ; ind < n; ind++){
                if(nums[ind] > 0) posi++;
                if(nums[ind] < 0) neg++;
                if(nums[ind] < 0 && startNeg == -1) startNeg = ind;     //store starting index of negative number
                if(nums[ind] < 0) endNeg = ind;                         //store end index of negative number
                if(nums[ind] == 0) break;                               //subarray ends now since after 0 all product will be 0  
            }

            // if we have even no of negative nos. -> multiply of even negative numbers are positive, so add both n and p
            if(neg % 2 == 0) maxi = max(maxi , neg + posi);
            if(neg % 2 == 1) {
                // removing start negative number 
                maxi = max(maxi, ind - startNeg - 1);
                // cout<<ind<<" "<<startNeg<<endl;
                // removing end negative number
                maxi = max(maxi, endNeg - i);
            }
            i = ind; //now starting from new subarray
        }
        return maxi;
    }
};
// Tc: O(N) | Sc: O(1)

/*
Question: Given an integer array nums, find a subarray that has the largest product, and return the product.
Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

Input:
arr[] ={0, 1, -2, -3, -4} 
Output:3
Explanation: The longest subarray with positive product is: {1, -2, -3}.Therefore, the required length is 3.

Example 2:
Input:
arr[]={-1, -2, 0, 1, 2}
Output:2
Explanation: The longest subarray with positive products are: {-1, -2}, {1, 2}. Therefore, the required length is 2.
 

*/
