  public:
    void dfs(int i, int v, vector<vector<int>> &adj, vector<int> &vis, int &n, int &e){
        vis[i] = 1;
        n++; // counting no. of vertices/nodes
        e += adj[i].size();  // for particular node taking it's all the adj node sum
        for(auto &it: adj[i]){
            if(!vis[it]){
                dfs(it,v,adj,vis,n,e);
            }
        }
    }
    
    int findNumberOfGoodComponent(int v, vector<vector<int>>& adj) {
        int ans = 0;
        vector<int> visited(v+1, 0);
        for(int i = 1; i <= v; i++){
            if(!visited[i]){
                int n = 0;
                int e = 0;
                dfs(i,v,adj,visited,n,e);
                e /= 2;     // since undirected graph
                if(e == n*(n-1)/2) ans++;
            }
        }
        return ans;
    }
};

/*
Question:
Given an undirected graph with V vertices(numbered from 1 to V) and E edges. Find the number of good components in the graph.
A component of the graph is good if and only if the component is a fully connected component.
Note: A fully connected component is a subgraph of a given graph such that there's an edge between every pair of vertices in a component, 
the given graph can be a disconnected graph. Consider the adjacency list from index 1.
Example 1:
[1 - {2,3}, 2 - {1,3}, 3 - {2,3}] -> [[2,3],[1,3],[2,3]]
output:1 , Yes it is good component

Intuition
If a fully connected component has n nodes then it must have (n*(n+1))/2 edges.
Run DFS over the unvisited components and check if it is satisfying the condition on not. 

Implementation
Step 1: Create a vector of size V, initially filled with zero.
Step 2: run a loop 1 to V 
Step 3: If iâ€™th node is not visited, do vertices = 0, edges = 0, run dfs from that node, and 
    calculate the number of edges in that component, in it satisfies the condition (edges == (vertices * (vertices - 1)) / 2) increase the answer.
Step 4: return the answer.

In DFS
Step 1: mark the current node as visited.
Step 2: increase vertices by 1, increase edges by adj[v].size();
Step 3: run a loop over the nodes connected to current node.
Step 4: if there is any node that is not visited run dfs from that node. 
Complexity

Time Complexity: As we are running DFS, so the time complexity is O(V+E) 
Space Complexity: As dfs is a recursive function so the space complexity is O(depth of the graph)
*/
