// Normal BFS 

class Solution{
    public:
    void connect(Node *root)
    {
        if(root == NULL) return;
        
        queue <Node*> q;
        q.push(root);
        
        while(!q.empty()){
            int size = q.size();
            for(int i=0; i<size; i++){
                Node* node = q.front();
                q.pop();
                
                if(i == size-1) node->nextRight = NULL;
                else node->nextRight = q.front();
                
                if(node->left != NULL){
                    q.push(node->left);
                }
                if(node->right != NULL){
                    q.push(node->right);
                }
            }
        }
    }    
};


/*
Time Complexity: As we are visiting each node once so the time complexity is O(N). (BFS)
Space Complexity: As we are using a queue to store the nodes so the space complexity is O(N). (Queue)

Given a binary tree, connect the nodes that are at the same level. The structure of the tree Node contains an addition nextRight pointer for this purpose.

Initially, all the nextRight pointers point to garbage values. Your function should set these pointers to point next right for each node.

       10                       10 ------> NULL
      / \                       /      \
     3   5       =>     3 ------> 5 --------> NULL
    / \     \               /  \           \
   4   1   2          4 --> 1 -----> 2 -------> NULL

Example 1:

Input:
     3
   /  \
  1    2
Output:
3 1 2
1 3 2
Explanation:The connected tree is
       3 ------> NULL
     /   \
    1---> 2 -----> NULL

Example 2:

Input:
      10
    /   \
   20   30
  /  \
 40  60
Output:
10 20 30 40 60
40 20 60 10 30
Explanation:The connected tree is
        10 ---> NULL
       /   \
     20---> 30 ---> NULL
   /   \
 40---> 60 ---> NULL
*/
