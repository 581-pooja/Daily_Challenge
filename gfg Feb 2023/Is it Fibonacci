class Solution {
  public:
    long long solve(int n, int k, vector<long long> GeekNum) {
        long long curSum = 0;
        
        for(int i = 0; i < k ; i++){
            curSum += GeekNum[i];
        }
        
        int left = 0;
        for(int right = k; right < n; right++){
            long long newElement = curSum;
            GeekNum.push_back(newElement);
            
            curSum += newElement;
            curSum -= GeekNum[left];
            left++;
        }
        return GeekNum[n-1];
    }
};

/*
Approach: Sliding Window approach
TC: O(N) SC: O(K) since window is of size K

Geek just learned about Fibonacci numbers.
    The Fibonacci Sequence is the series of numbers: 0, 1, 1, 2, 3, 5, 8, 13, ...
    where the next number is found by adding up the two numbers before it.
He defines a new series called Geeky numbers. Here the next number is the sum of the K preceding numbers.
You are given an array of size K, GeekNum[ ], where the ith element of the array represents the ith Geeky number. Return its Nth term.

Example 2:
Input: N = 5, K = 3
GeekNum[] = {0, 1, 2}
Output: 6
Explanation: Terms are 0, 1, 2, 3, 6, 11. So the 5th term is 6

*/
