class Solution {
public:
    bool wordPattern(string pattern, string s) {
        unordered_map <char, string> mp;   // a -> dog
        unordered_map <string, bool> visited;
        vector<string> wordList;

        // stringStream s
        stringstream st(s);

        // operator >> - Read something from the stringstream object.
        string word;
        int count = 0;
        while(st >> word){
            count++;
            wordList.push_back(word);
        }
        // vector wordList = {'dog', 'dog', 'cat'} -> {aab} // case 2
        // {'dog', 'dog', cat} -> {abc} // case 1
        // {'dog', 'cat', 'cat'} -> {aab}  //  case 3
        
        if(pattern.size() != count) {
            return false;
        }
        else{
            for(int i = 0; i < pattern.size(); i++){
                char c = pattern[i];    // char : 'aab'

                //case1. if not visted for new letter eg: abba s[dog,dog,dog,dog] so dog is already assinged to 'a' 
                // so "dog" will be visited before it comes to the letter b. 
                if(mp[c] == "" && visited[wordList[i]] == true){
                    return false;
                }

                //case 2 .if not visited we will make it visited and assign value
                else if(mp[c] == ""){
                    mp[c] = wordList[i];
                    visited[wordList[i]] = true;
                }
                //case 3. if value is already assigned so not equal 
                else{
                    if(mp[c] != wordList[i]) return false;
                }
            }
        }
        return true;
    }
};

// Tc: O(N) | SC: O(N) (For storing words in WordList)

/*
Given a pattern and a string s, find if s follows the same pattern.
Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

Example 1:
Input: pattern = "abba", s = "dog cat cat dog"
Output: true

Example 2:
Input: pattern = "abba", s = "dog cat cat fish"
Output: false

Example 3:
Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
*/
